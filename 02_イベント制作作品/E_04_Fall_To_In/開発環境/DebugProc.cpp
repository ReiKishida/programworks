//=============================================================================
//
// デバッグ処理 [DebugProc.h]
// Author : Ryota Kinoshita
//
//=============================================================================
#define  _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include "DebugProc.h"
#include "renderer.h"
#include "manager.h"
//*********************************************************************************
// 静的メンバ変数宣言
//*********************************************************************************
LPD3DXFONT CDebugProc::m_pFont;			// フォントへのポインタ
char CDebugProc::m_aStr[MAX_CHAR_NAME];			// 文字格納
//=============================================================================
// コンストラクタ
//=============================================================================
CDebugProc::CDebugProc()
{
	m_pFont = NULL;			// フォントへのポインタ
}

//=============================================================================
// デストラクタ
//=============================================================================
CDebugProc::~CDebugProc()
{

}

//=============================================================================
// ポリゴンの初期化処理
//=============================================================================
HRESULT CDebugProc::Init(void)
{
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();
	// デバッグ表示用フォントを設定
	// pDevice         : デバイスへのポインタ
	// Height          : 文字の高さ
	// Width           : 文字の幅
	// Weight          : フォントの太さ
	// MipLevels       : ミップマップレベル数
	// Italic          : イタリックフォント
	// CharSet         : フォントの文字セット
	// OutputPrecision : 実際のフォントと目的のフォントのサイズおよび特性の一致方法を指定
	// Quality         : 実際のフォントと目的のフォントとの一致方法を指定
	// PitchAndFamily  : ピッチとファミリインデックス
	// pFacename       : フォントの名前を保持する文字列
	// ppFont          : フォントへのポインタ

	// デバッグ情報表示用フォントの生成
	D3DXCreateFont(pDevice, 20, 0, 0, 0, FALSE, SHIFTJIS_CHARSET,
		OUT_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH, "ＭＳＰゴシック", &m_pFont);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CDebugProc::Uninit(void)
{
	// デバッグ情報表示用フォントの破棄
	if (m_pFont != NULL)
	{
		m_pFont->Release();
		m_pFont = NULL;
	}

}


//=============================================================================
// ポリゴンの描画処理
//=============================================================================
void CDebugProc::Draw(void)
{
	RECT rect = { 0, 0, 1000, 700 };
	m_pFont->DrawText(NULL, m_aStr, -1, &rect, DT_LEFT, D3DCOLOR_ARGB(255, 255, 255, 255));
	memset(&m_aStr[0], 0, sizeof(m_aStr));
}

//=============================================================================
// デバッグフォント表示
//=============================================================================
void CDebugProc::print(char *fmt, ...)
{
#ifdef _DEBUG
	int Len = strlen(m_aStr);
	if (Len >= MAX_CHAR_NAME)
	{
		return;
	}
	char aStr[1028];
	va_list ap ;
	// 可変長引数を１個の変数にまとめる
	va_start(ap, fmt);
	// まとめられた変数で処理する
	vsprintf(aStr, fmt, ap);
	va_end(ap);
	strcat(m_aStr, aStr);
#endif // _DEBUG
}